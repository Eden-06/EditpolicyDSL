/*
 * generated by Xtext 2.15.0
 */
package org.framed.iorm.editpolicydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.framed.iorm.editpolicydsl.ide.contentassist.antlr.internal.InternalDslParser;
import org.framed.iorm.editpolicydsl.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getConstraintRuleAccess().getAlternatives(), "rule__ConstraintRule__Alternatives");
			builder.put(grammarAccess.getFeatureRuleAccess().getAlternatives(), "rule__FeatureRule__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getNotFeatureExpressionAccess().getAlternatives(), "rule__NotFeatureExpression__Alternatives");
			builder.put(grammarAccess.getPrimaryFeatureAccess().getAlternatives(), "rule__PrimaryFeature__Alternatives");
			builder.put(grammarAccess.getNotConstraintExpressionAccess().getAlternatives(), "rule__NotConstraintExpression__Alternatives");
			builder.put(grammarAccess.getPrimaryConstraintAccess().getAlternatives(), "rule__PrimaryConstraint__Alternatives");
			builder.put(grammarAccess.getActionEnumAccess().getAlternatives(), "rule__ActionEnum__Alternatives");
			builder.put(grammarAccess.getFeatureTypeEnumAccess().getAlternatives(), "rule__FeatureTypeEnum__Alternatives");
			builder.put(grammarAccess.getFeatureNameEnumAccess().getAlternatives(), "rule__FeatureNameEnum__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getPolicyAccess().getGroup(), "rule__Policy__Group__0");
			builder.put(grammarAccess.getContainsTypeConstrainRuleAccess().getGroup(), "rule__ContainsTypeConstrainRule__Group__0");
			builder.put(grammarAccess.getIsTargetTypeConstraintRuleAccess().getGroup(), "rule__IsTargetTypeConstraintRule__Group__0");
			builder.put(grammarAccess.getIsTargetConnectionTypeConstraintRuleAccess().getGroup(), "rule__IsTargetConnectionTypeConstraintRule__Group__0");
			builder.put(grammarAccess.getIsSourceTypeConstraintRuleAccess().getGroup(), "rule__IsSourceTypeConstraintRule__Group__0");
			builder.put(grammarAccess.getInTypeConstraintRuleAccess().getGroup(), "rule__InTypeConstraintRule__Group__0");
			builder.put(grammarAccess.getSourceEqualsTargetConstraintRuleAccess().getGroup(), "rule__SourceEqualsTargetConstraintRule__Group__0");
			builder.put(grammarAccess.getSourceEqualsTargetTypeConstraintRuleAccess().getGroup(), "rule__SourceEqualsTargetTypeConstraintRule__Group__0");
			builder.put(grammarAccess.getIsFeatureAccess().getGroup(), "rule__IsFeature__Group__0");
			builder.put(grammarAccess.getTrueFeatureRuleAccess().getGroup(), "rule__TrueFeatureRule__Group__0");
			builder.put(grammarAccess.getTrueConstraintRuleAccess().getGroup(), "rule__TrueConstraintRule__Group__0");
			builder.put(grammarAccess.getFalseFeatureRuleAccess().getGroup(), "rule__FalseFeatureRule__Group__0");
			builder.put(grammarAccess.getFalseConstraintRuleAccess().getGroup(), "rule__FalseConstraintRule__Group__0");
			builder.put(grammarAccess.getImplicationFeatureAccess().getGroup(), "rule__ImplicationFeature__Group__0");
			builder.put(grammarAccess.getImplicationFeatureAccess().getGroup_1(), "rule__ImplicationFeature__Group_1__0");
			builder.put(grammarAccess.getOrFeatureAccess().getGroup(), "rule__OrFeature__Group__0");
			builder.put(grammarAccess.getOrFeatureAccess().getGroup_1(), "rule__OrFeature__Group_1__0");
			builder.put(grammarAccess.getAndFeatureAccess().getGroup(), "rule__AndFeature__Group__0");
			builder.put(grammarAccess.getAndFeatureAccess().getGroup_1(), "rule__AndFeature__Group_1__0");
			builder.put(grammarAccess.getNotFeatureExpressionAccess().getGroup_1(), "rule__NotFeatureExpression__Group_1__0");
			builder.put(grammarAccess.getPrimaryFeatureAccess().getGroup_1(), "rule__PrimaryFeature__Group_1__0");
			builder.put(grammarAccess.getImplicationConstraintAccess().getGroup(), "rule__ImplicationConstraint__Group__0");
			builder.put(grammarAccess.getImplicationConstraintAccess().getGroup_1(), "rule__ImplicationConstraint__Group_1__0");
			builder.put(grammarAccess.getOrConstraintAccess().getGroup(), "rule__OrConstraint__Group__0");
			builder.put(grammarAccess.getOrConstraintAccess().getGroup_1(), "rule__OrConstraint__Group_1__0");
			builder.put(grammarAccess.getAndConstraintAccess().getGroup(), "rule__AndConstraint__Group__0");
			builder.put(grammarAccess.getAndConstraintAccess().getGroup_1(), "rule__AndConstraint__Group_1__0");
			builder.put(grammarAccess.getNotConstraintExpressionAccess().getGroup_1(), "rule__NotConstraintExpression__Group_1__0");
			builder.put(grammarAccess.getPrimaryConstraintAccess().getGroup_1(), "rule__PrimaryConstraint__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getPoliciesAssignment_0(), "rule__Model__PoliciesAssignment_0");
			builder.put(grammarAccess.getModelAccess().getPoliciesAssignment_1(), "rule__Model__PoliciesAssignment_1");
			builder.put(grammarAccess.getPolicyAccess().getOverrideAssignment_0(), "rule__Policy__OverrideAssignment_0");
			builder.put(grammarAccess.getPolicyAccess().getActionAssignment_1(), "rule__Policy__ActionAssignment_1");
			builder.put(grammarAccess.getPolicyAccess().getActionTypeAssignment_2(), "rule__Policy__ActionTypeAssignment_2");
			builder.put(grammarAccess.getPolicyAccess().getFeatureRuleAssignment_4(), "rule__Policy__FeatureRuleAssignment_4");
			builder.put(grammarAccess.getPolicyAccess().getConstraintRuleAssignment_7(), "rule__Policy__ConstraintRuleAssignment_7");
			builder.put(grammarAccess.getContainsTypeConstrainRuleAccess().getTypeAssignment_3(), "rule__ContainsTypeConstrainRule__TypeAssignment_3");
			builder.put(grammarAccess.getIsTargetTypeConstraintRuleAccess().getTypeAssignment_3(), "rule__IsTargetTypeConstraintRule__TypeAssignment_3");
			builder.put(grammarAccess.getIsTargetConnectionTypeConstraintRuleAccess().getTypeAssignment_3(), "rule__IsTargetConnectionTypeConstraintRule__TypeAssignment_3");
			builder.put(grammarAccess.getIsSourceTypeConstraintRuleAccess().getTypeAssignment_3(), "rule__IsSourceTypeConstraintRule__TypeAssignment_3");
			builder.put(grammarAccess.getInTypeConstraintRuleAccess().getTypeAssignment_3(), "rule__InTypeConstraintRule__TypeAssignment_3");
			builder.put(grammarAccess.getIsFeatureAccess().getFeatureNameAssignment_1(), "rule__IsFeature__FeatureNameAssignment_1");
			builder.put(grammarAccess.getImplicationFeatureAccess().getRightRuleAssignment_1_2(), "rule__ImplicationFeature__RightRuleAssignment_1_2");
			builder.put(grammarAccess.getOrFeatureAccess().getRulesAssignment_1_2(), "rule__OrFeature__RulesAssignment_1_2");
			builder.put(grammarAccess.getAndFeatureAccess().getRulesAssignment_1_2(), "rule__AndFeature__RulesAssignment_1_2");
			builder.put(grammarAccess.getNotFeatureExpressionAccess().getRuleAssignment_1_2(), "rule__NotFeatureExpression__RuleAssignment_1_2");
			builder.put(grammarAccess.getImplicationConstraintAccess().getRightRuleAssignment_1_2(), "rule__ImplicationConstraint__RightRuleAssignment_1_2");
			builder.put(grammarAccess.getOrConstraintAccess().getRulesAssignment_1_2(), "rule__OrConstraint__RulesAssignment_1_2");
			builder.put(grammarAccess.getAndConstraintAccess().getRulesAssignment_1_2(), "rule__AndConstraint__RulesAssignment_1_2");
			builder.put(grammarAccess.getNotConstraintExpressionAccess().getRuleAssignment_1_2(), "rule__NotConstraintExpression__RuleAssignment_1_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslGrammarAccess grammarAccess;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
